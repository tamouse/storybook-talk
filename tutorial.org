#+TITLE: Storybook Tutorial
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t reveal-title-slide:auto
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: toc:nil
#+REVEAL_TRANS: none
#+REVEAL_THEME: moon
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Storybook Tutorial">
#+REVEAL_POSTAMBLE: <div> Created by Tamara Temple &lt;tamara@tamouse.org&gt; </div>
#+REVEAL_PLUGINS: (markdown notes)
#+BEGIN_EXPORT html
<style media="screen">
@import url("https://fonts.googleapis.com/css?family=Montserrat:700,700i");
.reveal h1,.reveal h2,.reveal h3,.reveal h4,.reveal h5,.reveal h6 {
text-transform: inherit; font-family: "Monserrat", sans-serif; font-weight: bold;
}

@import url("https://fonts.googleapis.com/css?family=Lato:400,400i");
.reveal section. .reveal div, .reveal p, .reveal ul, .reveal ol, .reveal li, .reveal dl, .reveal dt, .reveal dd,
.reveal blockquote, .reveal q, .reveal aside, .reveal figure, .reveal figcaption, .reveal article, .reveal header,
.reveal footer, .reveal span, .reveal i, .reveal b, .reveal em, .reveal strong {
font-family: "Lato", sans-serif;
}
.reveal .slide-number { color: white; }
</style>
#+END_EXPORT

* Introduction

  Storybook Tutorial

** who am I

#+ATTR_REVEAL: :frag (fade-in)
   - Tamara Temple
   - github: tamouse
   - Software developer for a (very) long time.
   - Primary focus on back-end development for past 20 years.
   - React development since middle of 2017
   - nearly full-time
   - still do back-end Rails + GraphQL server work


** what is storybook?

#+ATTR_REVEAL: :frag (fade-in)
   - UI development environment for UI components
   - visualize different states of your UI components
   - develop them interactively
   - runs outside of your app
   - develop UI components in isolation
   - without app-specific dependencies and requirements


* Quick Setup and Go

  Start with your existing react app

  #+BEGIN_SRC shell-script
     cd path/to/project
  #+END_SRC

** Install the storybook cli script globally

   #+BEGIN_SRC shell-script
    npm install -g @storybook/cli

    # - or -

    yarn global add @storybook/cli
  #+END_SRC

** Add it to your project

   #+BEGIN_SRC shell-script
     getstorybook
   #+END_SRC

** Start compiling stories

   #+BEGIN_SRC shell-script
     npm run storybook

     # -or-

     yarn storybook
   #+END_SRC
* Slow Setup
** Add storybook to your project

After creating your react app, add storybook for react:

#+BEGIN_SRC shell-script
  yarn add @storybook/react
#+END_SRC

** Configure storybook

Create the configuration directory and files:

#+BEGIN_SRC shell-script
  mkdir .storybook
  touch .storybook/config.js
#+END_SRC

*** decide how you want to organize stories

    This is how storybook finds stories.

    - the quick way: load stories from a single directory
    - the react way (?): stories next to components

*** project structure

    #+BEGIN_SRC
    <project_root>/
      .storybook/
        config.js
      src/
        index.js
        App.js
        App.test.js
        App.story.js
    #+END_SRC

*** load stories via webpack's require.context()

    #+ATTR_REVEAL: :frag (fade-in)
    - allows you to require files
    - matches a pattern
    - optionally recursing a directory
    - See: [[https://webpack.js.org/guides/dependency-management/#require-context]]

    #+REVEAL: split

    #+BEGIN_SRC javascript
      // .storybook/config.js
      import { configure } from '@storybook/react';

      function importAll(req) {
        req.keys().forEach(filename => req(filename));
      }

      function loadStories() {
        let req;
        req = require.context('../src', true, /\.story\.js$/);
        importAll(req);
      }

      configure(loadStories, module);
    #+END_SRC

** Write stories

   Let's write the story for the main React App component

   #+BEGIN_SRC javascript
     // src/App.story.js
     import React from "react";
     import { storiesOf } from "@storybook/react";
     import App from "./App";

     storiesOf("Main React App", module).add("the app", () => <App />);
   #+END_SRC

** Run storybook

   Add a script to ~package.json~ to run storybook

   #+BEGIN_SRC javascript
       "scripts": {
         "start": "react-scripts start",
         "build": "react-scripts build",
         "test": "react-scripts test",
         "eject": "react-scripts eject",
         "storybook": "start-storybook -p 9009 -c .storybook"
       },
   #+END_SRC

   #+REVEAL: split

   Run the script and open your browser to ~http://localhost:9009~

   #+BEGIN_SRC shell-script
     yarn run storybook

     # or just

     yarn storybook
   #+END_SRC

* Basic usage

** A simple component

   Let's build a simple horizontal input field component.

   This will be wrapped in a form in the application

   #+REVEAL: split

   #+BEGIN_SRC javascript
     export class HorizontalInputField extends React.Component {
       render() {
         const { id, label, name, onChange } = this.props;
         return (
           <FormGroup>
             <label for={name}>{label}</label>
             <input
               className="form-control"
               id={id}
               type="text"
               name={name}
               onChange={onChange}
             />
           </FormGroup>
         );
       }
     }
   #+END_SRC

** A simple set of stories

   The corresponding story will use wrap the component to display it properly

   #+BEGIN_SRC javascript
     import HorizontalInputField from "./index";
     storiesOf("components/HorizontalInputField", module)
       .add("basic example", () => (
         <Wrapper>
           <Form>
             <HorizontalInputField
               id="email-input-field"
               name="email"
               label="Email:"
               onChange={noop}
             />
           </Form>
         </Wrapper>
      ));
   #+END_SRC

* Extending stories using addons

  Besides the aforementioned ~actions~ addon, storybook has many other *addons*:

  [[https://storybook.js.org/addons/addon-gallery/]]

** Small set I've used:

   - *Actions*: event "inspector"
   - *Apollo*: a mock Apollo Client provider
   - *Storybook-router*: router providers for React and Vue

* Actions Addon

** Install the addon

   #+BEGIN_SRC shell-script
     yarn add @storybook/addon-actions
   #+END_SRC

** Add to configuration

   #+BEGIN_SRC javascript
     // .storybook/addons.js
     import "@storybook/addons/register"
   #+END_SRC

** Add them to your story

   #+BEGIN_SRC javascript
     // ...
     import { action } from "@storybook/addon-actions/register"
     // ...

     storiesOf("components/HorizontalInputField", module)
       .add("basic example", () => (
         <Wrapper>
           <Form>
             <HorizontalInputField
               id="email-input-field"
               name="email"
               label="Email:"
               onChange={action("email field changed")}
             />
           </Form>
         </Wrapper>
      ));
   #+END_SRC

** See the events as they trigger

   Every time the input field changes, an event is shown in the "Action Logger" area

* Tips

** Organizing stories

*** Follow the same organizing principles you use with tests

   - in separate tree
   - alongside component

*** Share test data

   Reuse test data from your specs by organizing it to share



** use a Consumer

   - keep stories light
   - common elements to present the story

** using jsdoc and markup

   Extract and display in story

** generators

   Create component, spec, and story boilerplate

* @me

  - Tamara Temple
  - github: tamouse
  - twitter: @tamouse
